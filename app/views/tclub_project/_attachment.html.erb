
<% attachment_param ||= 'attachments' %>
<% saved_attachments ||= container.saved_attachments if defined?(container) && container %>
<% multiple = true unless defined?(multiple) && multiple == false %>
<% show_add = multiple || saved_attachments.blank? %>
<% description = (defined?(description) && description == false ? false : true) %>
<% css_class = (defined?(filedrop) && filedrop == false ? '' : "#{drop_file_id}") %>

<span class="attachments_form">
      <span class="attachments_fields">
        <% if saved_attachments.present? %>
          <% saved_attachments.each_with_index do |attachment, i| %>
            <span id="attachments_p<%= i %>">
              <%= text_field_tag("#{attachment_param}[p#{i}][filename]", attachment.filename, :class => 'filename') %>
              <% if attachment.container_id.present? %>
                <%= link_to l(:label_delete), "#", :onclick => "$(this).closest('.attachments_form').find('.add_attachment').show(); $(this).parent().remove(); return false;", :class => 'icon-only icon-del' %>
                <%= hidden_field_tag "#{attachment_param}[p#{i}][id]", attachment.id %>
              <% else %>
                <%= text_field_tag("#{attachment_param}[p#{i}][description]", attachment.description, :maxlength => 255, :placeholder => l(:label_optional_description), :class => 'description') if description %>
                <%= link_to('&nbsp;'.html_safe, attachment_path(attachment, :attachment_id => "p#{i}", :format => 'js'), :method => 'delete', :remote => true, :class => 'icon-only icon-del remove-upload') %>
                <%= hidden_field_tag "#{attachment_param}[p#{i}][token]", attachment.token %>
              <% end %>
            </span>
          <% end %>
        <% end %>
      </span>
      <span hidden>

      <span class="add_attachment" style="display:none;">
        <%= file_field_tag "#{attachment_param}[dummy][file]",
                           :id => nil,
                           :class => "file_selector #{css_class}",
                           :multiple => multiple,
                           :onchange => 'addInputFiles(this);',
                           :data => {
                               :max_file_size => Setting.attachment_max_size.to_i.kilobytes,
                               :max_file_size_message => l(:error_attachment_too_big, :max_size => number_to_human_size(Setting.attachment_max_size.to_i.kilobytes)),
                               :max_concurrent_uploads => Redmine::Configuration['max_concurrent_ajax_uploads'].to_i,
                               :upload_path => upload_client_report_index_path(:format => 'js'),
                               :param => attachment_param,
                               :description => description,
                               :description_placeholder => l(:label_optional_description)
                           } %>
        (<%= l(:label_max_size) %>: <%= number_to_human_size(Setting.attachment_max_size.to_i.kilobytes) %>)
      </span>
      </span>
    </span>
<script>
    function handleFileDropEvent2(e) {

        $(this).removeClass('fileover');
        blockEventPropagation(e);

        if ($.inArray('Files', e.dataTransfer.types) > -1) {
            handleFileDropEvent.target = e.target;
            uploadAndAttachFiles(e.dataTransfer.files, $('input:file.<%= drop_file_id %>').first());
        }
    }
    $(document).ready(function(){
        // initialisation des variables
        var fileInput  = document.querySelector( ".file_selector" ),
            button     = document.querySelector( ".input-file-trigger" )

        // action lorsque la "barre d'espace" ou "Entrée" est pressée
        button.addEventListener( "keydown", function( event ) {
            if ( event.keyCode == 13 || event.keyCode == 32 ) {
                fileInput.focus();
            }
        });

        // action lorsque le label est cliqué
        button.addEventListener( "click", function( event ) {
            // fileInput.focus();
            fileInput.click();
            return false;
        });



        $(document).on('dragenter', '#<%= drop_file_id %>', function() {
            $(this).css('border', '3px dashed blue');
            return false;
        });

        $(document).on('dragover', '#<%= drop_file_id %>', function(e){
            e.preventDefault();
            e.stopPropagation();
            $(this).css('border', '3px dashed #2BAA48');
            return false;
        });

        $(document).on('dragleave', '#<%= drop_file_id %>', function(e) {
            e.preventDefault();
            e.stopPropagation();
            $(this).css('border', '3px dashed #2BAA48');
            return false;
        });

        $(document).on('drop', '#<%= drop_file_id %>', function(e) {
            if(e.originalEvent.dataTransfer){
                if(e.originalEvent.dataTransfer.files.length) {
                    // Stop the propagation of the event
                    e.preventDefault();
                    e.stopPropagation();
                    $(this).css('border', '3px dashed green');
                    // Main function to upload
                    handleFileDropEvent2(e)
                }
            }
            else {
                $(this).css('border', '3px dashed #BBBBBB');
            }
            return false;
        });

    })
</script>
